* Venus Emacs

[[./venus.jpg]]

Venus Emacs is a "slightly configured" Emacs flavor, made by
ksqsf. (It also hosts some packages that I have written for my own
convenience. See the last section.)

** Supported Platforms

This configuration is mainly developed on macOS.  It also works on
Linux and Windows (for the most part).

NOTE: This configuration only targets Emacs 29.  (For one thing, it
relies on the bundled =use-package=.)  No guarantee about
forward/backward compatibility.  You can comment out the first
paragraph in =init.el= if you do want to try.

** Philosophy

My primary goals are

- Fast, and responsive
- Healthy, and easy on the eye
- Productive, and distraction-free
- Predictable
- Stable
- Maintainable codebase
- Prefer built-in functionality to third-party packages


+I don't strive to achieve eye-candy and powerfulness, but they are
good, and may be considered in the future.+ I think my Emacs now is
beautiful AND powerful! ( ^ ω ^ )

** Structure

There are two kinds of configuration, Module and Volatile.  The
distinction is (in my mind) very successful.

*** Module

Modules make up the functionality and keybindings.  They are stable
and can be byte compiled safely and cleanly.  Ideally, they use
lexical scoping.

*** Volatile

Volatile configuration files are more fragile and personal.  They are
mainly temporary tests or (let's hope not) ugly hacks.  A volatile
Lisp file should never be byte compiled.  Typically, it's dynamically
scoped.

** Fonts

The following fonts are "blessed" in this configuration.

| Font                 | Point | Usage                         |
|----------------------+-------+-------------------------------|
| (Any monospace font) |    14 | General use (non-Chinese)     |
| Sarasa Mono          |    14 | For perfect Chinese alignment |

** Better Defaults

These modifications are generally in =prelude-core.el= and
=prelude-ui.el=.

User-visible modifications are listed here.

*** Modal editing (Evil)

I use Evil, because the Vi-style editing commands are the de facto
standard right now, and evil-collection is great, and I still retain
some muscle memory (I used to be a Vim user).  Though, conceptually, I
like Meow better.

Evil-collection offers a large collection of consistent,
pre-configured keybindings for a variety of major modes.  See its
[[https://github.com/emacs-evil/evil-collection][readme]].

I use a hybrid editing style, i.e. in the insert mode, most Emacs
commands are still available, so I can keep my muscle memory as much
as possible.  This is done by customizing
=evil-disable-insert-state-bindings=.  The conflicts are resolved
depending on which is most familiar to me.

The evil integration can be disabled cleanly by commenting out
=(require 'prelude-evil)= in =init.el=.

*** Expand region

=C-SPC C-SPC= to expand the current region semantically.

*** Zap up to char

=M-z= was assigned to =zap-up-to-char=.  You can easily achieve what
=zap-to-char= does with =M-z <char> C-d=.

At first, I thought =M-z t= and =M-z f= would be cool, but it turned
out to be a horrible idea, because one must stop to think which key to
press.

*** Mode line

Any of the following looks pretty good:

- Default
- Doom mode line
- Moody

*** Quick Completion

I use Vertico.

*** REPL

Many major modes support REPL, but their keybindings are often
very different.  The following keychords are adopted by Emacs
itself, so they are preferred when possible.

| Key     | Function             |
|---------+----------------------|
| C-c C-c | Send buffer          |
| C-c C-l | Send file            |
| C-x C-e | Send this expression |
| C-M-x   | Send this function   |

**** Haskell, Idris

Haskell-mode has Interactive Haskell mode supporting ghci.  Due to
Haskell's specialness, all you can do is =C-c C-l=.

**** Python

Elpy defined a bunch of send functions, but they turn out to be not so
helpful.

**** Coq

Coq is an interactive proof assistant, whose Emacs interface is Proof
General, which defines its own set of commands.

*** Structured Editing

Structured editing is a novel editing experience that operates on the
level of "structures", be it expressions or statements.

I use paredit for the Lisp family.  For tree-sitter-enabled major
modes, use combobulate-mode.

My preferred keybindings are:

| Key     | Function             |
|---------+----------------------|
| M-k     | Kill current         |
| M-up    | Splice               |
| M-left  | Slurp left           |
| M-right | Slurp right          |
| M-a     | Same level, backward |
| M-e     | Same level, forward  |

"Sentence" is the metaphor for "expression". Navigation by word is
useful, so I won't override it.

*** LSP

I've fully embraced LSP! (Used to be a skeptic.)

- =eglot= as the LSP client. (Easier to hack than =lsp-mode=.)
- =corfu= as the universal completion frontend.


"Blessed" LSP servers:

| Language | Server        | Integration  |
|----------+---------------+--------------|
| Haskell  | [[https://github.com/haskell/haskell-language-server][HLS]]           | (not needed) |
| Rust     | [[https://github.com/rust-analyzer/rust-analyzer][rust-analyzer]] | [[https://github.com/brotzeit/rustic][Rustic]]       |
| C/C++    | [[https://github.com/MaskRay/ccls][ccls]]          | (not needed) |
| Python   | [[https://github.com/microsoft/pyright][PyRight]]       | (not needed) |
| LaTeX    | [[https://github.com/latex-lsp/texlab][texlab]]        | (not needed) |

These servers can be installed via Homebrew or Nix.  Eglot is
intelligent enough to work with any server without special
configuration.

** Unlimited Lisp Works
This repo hosts some other Emacs Lisp works made by me for my own
convenience. It might be useful for you, too, so I made a list here
for better discoverability.

| Who            | Where                    | What                               |
|----------------+--------------------------+------------------------------------|
| pest-mode      | github ksqsf/pest-mode   | Major mode for Pest files          |
| treefold       | ./lisp/treefold.el       | Fold any tree-like text            |
| smtlib2-mode   | ./lisp/smtlib2-mode.el   | Major mode for SMT scripts         |
| lojban         | ./lisp/lojban.el         | Zbalermorna input and rendering    |
| bionic-reading | ./lisp/bionic-reading.el | A (sort of) bionic reader in Emacs |
| clipboard      | ./lisp/clipboard.el      | clipboard inspector                |
| clipmgr        | ./lisp/clipmgr.el        | (WIP) a clipboard manager          |
| region-mark    | ./lisp/region-mark.el    |                                    |
| fish-protector | ./lisp/fish-protector.el | 魚の護衛者                         |
| logseq         | ./lisp/logseq.el         | Logseq HTTP API                    |
| leitner        | ./lisp/leitner.el        | The Leitner system (a kind of SRS) |
| org-xlatex     | github ksqsf/org-xlatex  | instant latex preview              |
