;;; prelude-loaddefs.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:


;;;### (autoloads nil "bionic-reading" "bionic-reading.el" (0 0 0
;;;;;;  0))
;;; Generated autoloads from bionic-reading.el

(autoload 'bionic-word "bionic-reading" "\
Bionicify the word at point" t)

(autoload 'bionic-buffer "bionic-reading" "\
Bionicify all the visible parts of the current buffer." t)

(autoload 'bionic-debuffer "bionic-reading" "\
Undo the bionicification." t)

(register-definition-prefixes "bionic-reading" '("bionic-overlays"))

;;;***

;;;### (autoloads nil "calctex" "calctex.el" (0 0 0 0))
;;; Generated autoloads from calctex.el

(autoload 'calctex-default-render-process "calctex" "\
The default function that calctex will use to render LaTeX SRC.

\(fn SRC)")

(autoload 'calctex-mode "calctex" "\
Turn calc into an editor for rendered LaTeX equations.

This is a minor mode.  If called interactively, toggle the
`Calctex mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `calctex-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t)

(register-definition-prefixes "calctex" '("calctex-"))

;;;***

;;;### (autoloads nil "clipboard" "clipboard.el" (0 0 0 0))
;;; Generated autoloads from clipboard.el

(autoload 'clipboard-inspect "clipboard" nil t)

(register-definition-prefixes "clipboard" '("clipboard--"))

;;;***

;;;### (autoloads nil "clipmgr" "clipmgr.el" (0 0 0 0))
;;; Generated autoloads from clipmgr.el

(autoload 'clipmgr-start "clipmgr" nil t)

(autoload 'clipmgr-stop "clipmgr" nil t)

(autoload 'clipmgr-select "clipmgr" nil t)

(register-definition-prefixes "clipmgr" '("clip"))

;;;***

;;;### (autoloads nil "erc-sasl" "erc-sasl.el" (0 0 0 0))
;;; Generated autoloads from erc-sasl.el

(register-definition-prefixes "erc-sasl" '("erc-sasl-"))

;;;***

;;;### (autoloads nil "fluidsynth" "fluidsynth.el" (0 0 0 0))
;;; Generated autoloads from fluidsynth.el

(register-definition-prefixes "fluidsynth" '("fluidsynth-" "make-fluidsynth"))

;;;***

;;;### (autoloads nil "gud-lldb" "gud-lldb.el" (0 0 0 0))
;;; Generated autoloads from gud-lldb.el

(autoload 'lldb "gud-lldb" "\
Run lldb on program FILE in buffer *gud-FILE*.
The directory containing FILE becomes the initial working directory
and source-file directory for your debugger.

\(fn COMMAND-LINE)" t)

(register-definition-prefixes "gud-lldb" '("gud-" "lldb-"))

;;;***

;;;### (autoloads nil "highlight-tail" "highlight-tail.el" (0 0 0
;;;;;;  0))
;;; Generated autoloads from highlight-tail.el

(autoload 'highlight-tail-mode "highlight-tail" "\
Draw a \"tail\" while you're typing.

This minor-mode draws a tail in real time, when you write.  It
changes the background color of some last typed characters and
smoothly fade them out.

If ARG is 0 or less than zero then the mode will be disabled.
If ARG is nil then the mode will be switched.
If ARG is greater than zero then this mode will be turned on.

\(fn &optional ARG)" t)

(register-definition-prefixes "highlight-tail" '("highlight-tail-"))

;;;***

;;;### (autoloads nil "lojban" "lojban.el" (0 0 0 0))
;;; Generated autoloads from lojban.el

(autoload 'zbalermorna-setup "lojban" "\
Set up the composition rules for zbalermonrna." t)

(autoload 'lojban-setup "lojban" "\
Set up the Lojban language environment." t)

(set-language-info-alist "Lojban" '((charset unicode) (coding-system utf-8) (coding-priority utf-8) (input-method . "zbalermorna") (documentation . "Using the zbalermorna script and its associated input method.") (sample-text . "         ") (setup-function . lojban-setup)))

(register-definition-prefixes "lojban" '("zbalermorna-"))

;;;***

;;;### (autoloads nil "region-mark" "region-mark.el" (0 0 0 0))
;;; Generated autoloads from region-mark.el

(autoload 'rm-set "region-mark" "\
Mark a region for quick references to both pointers of the region.

Only one region can be marked in a buffer.

\(fn BEG END)" t)

(autoload 'rm-clear "region-mark" "\
Clear the marked region." t)

(register-definition-prefixes "region-mark" '("rm-"))

;;;***

;;;### (autoloads nil "rfcview" "rfcview.el" (0 0 0 0))
;;; Generated autoloads from rfcview.el

(autoload 'rfcview-customize "rfcview" nil t)

(autoload 'rfcview-mode "rfcview" "\
Major mode for viewing Internet RFCs.

http://www.neilvandyke.org/rfcview/

Key bindings:
\\{rfcview-mode-map}" t)

(register-definition-prefixes "rfcview" '("rfcview-"))

;;;***

;;;### (autoloads nil "smtlib2-mode" "smtlib2-mode.el" (0 0 0 0))
;;; Generated autoloads from smtlib2-mode.el

(autoload 'smtlib2-mode "smtlib2-mode" "\
Major mode for editing SMT-LIB2 files

\(fn)" t)

(register-definition-prefixes "smtlib2-mode" '("smtlib2-"))

;;;***

;;;### (autoloads nil "treefold" "treefold.el" (0 0 0 0))
;;; Generated autoloads from treefold.el

(autoload 'treefold-toggle "treefold" "\
Toggle whether the current subtree is folded." t)

(autoload 'treefold-unfold-all "treefold" "\
Unfold all subtrees in this buffer." t)

(autoload 'treefold-forward-subtree "treefold" "\
Go to the position of the indicator for the next N-th subtree.

If N is negative, search backwards.

\(fn &optional N)" t)

(autoload 'treefold-backward-subtree "treefold" "\
Go to the position of the indicator for the previous N-th subtree.

If N is negative, search forward.

\(fn &optional N)" t)

(autoload 'treefold-mode "treefold" "\
Enable treefold functions in this buffer.

This is a minor mode.  If called interactively, toggle the
`Treefold mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `treefold-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t)

(register-definition-prefixes "treefold" '("treefold--"))

;;;***

;;;### (autoloads nil nil ("hou.el") (0 0 0 0))

;;;***

;;; End of scraped data

(provide 'prelude-loaddefs)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; prelude-loaddefs.el ends here
